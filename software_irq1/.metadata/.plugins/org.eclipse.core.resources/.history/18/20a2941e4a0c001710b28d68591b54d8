/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <unistd.h>
#include "system.h"
#include "altera_up_avalon_parallel_port_regs.h"
#include "sys/alt_irq.h"
#include "alt_types.h"    //<alt_types.h>
/* A variable to hold the value of the button pio edge capture register. */
volatile int edge_capture;
void init_pio();
/*  WE USED unsigned long instead of the alt_type: alt_u32  */
void handle_sw_interrupts(void* context, unsigned long id);
void handle_key_interrupts(void* context, unsigned long id);

void Update_HEX_display(int);

enum type {
	SHOW_TIME = 0x00, SHOW_CHRONO = 0x01
} type;

enum chrono_state {
	ARRET = 0x00, ACTIF = 0x01
} chrono_state;

int h, m, s, ms; // vars of the time
int hc, mc, sc, msc; // these are the variables of the chronometer

volatile int * btn_ptr = (int*) KEY_BASE; //  0x1001060; //
volatile int * sw_ptr = (int*) SW_BASE; //  0x1001050 ; //
volatile int * hex_ptr = (int*) HEX_BASE; //0x1001020; // ;
volatile int * ledr_ptr = (int*) LEDR_BASE; // 0x1001030; //LEDR_BASE;
volatile int * ledg_ptr = (int*) LEDG_BASE; //0x1001040; // LEDG_BASE;
int val = 0;

char seven_seg_decode_table[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,
		0x07, 0x7F, 0x6F, 0x77, 0x73, 0x39, 0x5E, 0x79, 0x71 };
char hex_segments[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

int main() {

	init_pio();

	/*
	 while(1){
	 *ledr_ptr = val;
	 }
	 */

	int dis_s, unit_s, dis_m, unit_m;
	int dis_s_c, unit_s_c, dis_m_c, unit_m_c;

	type = SHOW_TIME;
	chrono_state = ARRET;

	//Update_HEX_display(0x4321);
	ms = s = m = h = 0;
	msc = sc = mc = hc = 0;


	while (1) {

		if (ms == 1000) {
			ms = 0;
			s++;

	/*		if (type == SHOW_TIME) {
				int hex_num1;
				dis_s = s / 10;
				unit_s = s % 10;
				dis_m = m / 10;
				unit_m = m % 10;
				hex_num1 = (unit_s) | (dis_s << 4) | (unit_m << 8) | (dis_m << 12);
				Update_HEX_display(hex_num1);

			} else if (type == SHOW_CHRONO){
				int hex_num;
				dis_s_c = sc / 10;
				unit_s_c = sc % 10;
				dis_m_c = mc / 10;
				unit_m_c = mc % 10;
				hex_num = (unit_s_c) | (dis_s_c << 4) | (unit_m_c << 8) | (dis_m_c << 12);
				Update_HEX_display(hex_num);

			}
*/
		}
		if (s == 60) {
			s = 0;
			m++;
		}
		if (m == 60) {
			m = 0;
			h++;
		}


		if (chrono_state == ACTIF) {

			if (msc == 1000) {
				msc = 0;
				sc++;
			}
			if (sc == 60) {
				sc = 0;
				mc++;
			}
			if (mc == 60) {
				mc = 0;
				hc++;
			}

		}




		//printf("time: %d:%d ----\t\tchrono:  %d:%d   -- %s\n", m, s, mc, sc, (type == SHOW_TIME ? "time" : "chrono"));

		printf("%d:%d\n", m, s);

		usleep(10);
		ms++;
		if (chrono_state == ACTIF)
			msc++;
	}

	return 0;
}

void handle_sw_interrupts(void* context, unsigned long id) {
	/* Cast context to edge_capture's type. It is important that this be
	 * declared volatile to avoid unwanted compiler optimization.
	 */
	// volatile int* edge_capture_ptr = (volatile int*) context;
	type = (IORD_ALT_UP_PARALLEL_PORT_DATA(sw_ptr) == 0 ? SHOW_TIME : SHOW_CHRONO);

	IOWR_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(SW_BASE, 0);

}

void handle_key_interrupts(void* context, unsigned long id) {
	/* Cast context to edge_capture's type. It is important that this be
	 * declared volatile to avoid unwanted compiler optimization.
	 */
	//   volatile int* edge_capture_ptr = (volatile int*) context;
	/* Store the value in the Button's edge capture register in *context. */
	// *edge_capture_ptr = IORD_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(SW_BASE);
	// n++;
	/*  Set ur action here   */
	//   val = ~val; // == 0 ? 1 : 0); //IORD_ALT_UP_PARALLEL_PORT_DATA(SW_BASE);
	int KEY_val = IORD_ALT_UP_PARALLEL_PORT_DATA(KEY_BASE);

	if (KEY_val & 0x8) // RESET TIME is KEY[3]
	{
		ms = s = m = h = 0;
	}

	if (KEY_val & 0x4) // PAUSE/ARRET
		chrono_state = (chrono_state == ARRET ? ACTIF : ARRET);

	if (KEY_val & 0x2) // Reset Chrono
	{
		hc = mc = sc = msc = 0;
	}

	/* Reset the Button's edge capture register. */
	//IOWR_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(SW_BASE, 1);
	IOWR_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(SW_BASE, 0);

}

/* Initialize the pio. */
void init_pio() {
	/* Recast the edge_capture pointer to match the alt_irq_register() function
	 * prototype. */
	void* edge_capture_ptr = (void*) &edge_capture;
	/* Enable first four interrupts. */
	// First SW is for Switching between Chrono and Time
	IOWR_ALT_UP_PARALLEL_PORT_INTERRUPT_MASK(SW_BASE, 0x01);
	IOWR_ALT_UP_PARALLEL_PORT_INTERRUPT_MASK(KEY_BASE, 0x0E);

	////IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_BASE, 0xf);

	/* Reset the edge capture register. */
	IOWR_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(SW_BASE, 0);
	////IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_BASE, 0x0);
	IOWR_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(KEY_BASE, 0);
	////IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_BASE, 0x0);

	/* Register the interrupt handler. */
	alt_irq_register(SW_IRQ, edge_capture_ptr, handle_sw_interrupts);
	alt_irq_register(KEY_IRQ, edge_capture_ptr, handle_key_interrupts);

	// IRQ of Timer
//	alt_irq_register(TIMER_IRQ, edge_capture_ptr, interval_timer_isr);

}

/*******************************************************************************
 * Updates the value displayed on the hex display. The value is taken from the
 * buffer.
 ********************************************************************************/
void Update_HEX_display(int buffer) {
volatile int* HEX3_HEX0_ptr = (int*) HEX_BASE;

int shift_buffer, nibble;
char code;
int i;

shift_buffer = buffer;
for (i = 0; i < 8; ++i) {
	nibble = shift_buffer & 0x0000000F; // character is in rightmost nibble
	code = seven_seg_decode_table[nibble];
	hex_segments[i] = code;
	shift_buffer = shift_buffer >> 4;
}
*(HEX3_HEX0_ptr) = *(int *) hex_segments; // drive the hex displays
return;
}

void interval_timer_isr()
{
	volatile int * interval_timer_ptr = (int *) TIMER_BASE;
	*(interval_timer_ptr) = 0;

}
