/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <unistd.h>
#include "system.h"

void Update_HEX_display(int);


int h, m, s, ms;


volatile int * btn_ptr = (int*)0x1001060; //KEY_BASE;
volatile int * sw_ptr  = (int*)0x1001050; // SW_BASE;
volatile int * hex_ptr = (int*)0x1001020; //HEX_BASE;
volatile int * ledr_ptr = (int*)0x1001030; //LEDR_BASE;
volatile int * ledg_ptr = (int*)0x1001040; //LEDG_BASE;

/* SEVEN_SEGMENT_DECODE_TABLE gives the on/off settings for all segments in
 * a single 7-seg display in the DE1 basic computer, for the characters
 * 'blank', 1, 2, 3, 4, S, 6, r, o, 9, A, P, C, d, E, F. These values obey
 * the digit indexes on the DE1 board 7-seg displays, and the assignment of
 * these signals to parallel port pins in the DE1 basic computer
 */
char seven_seg_decode_table[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x50, 0x5C, 0x67, 0x77, 0x73, 0x39, 0x5E, 0x79, 0x71 };
char hex_segments[] = { 0, 0, 0, 0, 0, 0, 0, 0 };


int main()
{
	int dis_s ,  unit_s , dis_m, unit_m, hex_num;


  printf("Hello from Nios II!\n");

  // code of ERROR 0xe7787
//j %= 10;
			  Update_HEX_display(0x4321);

  while (1)
  {
	  //int val = *(sw_ptr);
	  //*ledg_ptr = val & 0x03;
	  if (ms == 1000)
		{
			  ms = 0; s++;

  			  dis_s = s/10;
  			  unit_s =  s%10;
  			  dis_m = m/10;
  			  unit_m = m%10;
  			  hex_num = (unit_s) | (dis_s << 4) | (unit_m << 8) | (dis_m << 12) ;
  			  Update_HEX_display(hex_num);

			  printf("%d \n", s);
		}
	  if (s == 60)
	  		{
	  			  s = 0; m++;




	  		}
	  if (m == 60)
	  		{
	  			  m = 0; h++;
	  		}

	  /////////


	  usleep(30);
	  ms++;
  }



/*
	while(1)
	{
		btn_res =  *btn_ptr;
		sw_res  = *sw_ptr;





	}
*/


  return 0;
}

/*******************************************************************************
 * Updates the value displayed on the hex display. The value is taken from the
 * buffer.
********************************************************************************/
void Update_HEX_display( int buffer )
{
    volatile int*  HEX3_HEX0_ptr = (int*)HEX_BASE;


	int shift_buffer, nibble;
        char code;
        int i;

        shift_buffer = buffer;
        for ( i = 0; i < 8; ++i )
        {
            nibble = shift_buffer & 0x0000000F;                // character is in rightmost nibble
            code = seven_seg_decode_table[nibble];
            hex_segments[i] = code;
            shift_buffer = shift_buffer >> 4;
        }
        *(HEX3_HEX0_ptr) = *(int *) hex_segments;                 // drive the hex displays
        return;
}
